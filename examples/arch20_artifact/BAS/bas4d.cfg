#-----------------------------------------------------------------------
# File: bas.cfg
#-----------------------------------------------------------------------

# Authors: M. Khaled
# Date created: 09.04.2020
# This example corresponds to problem 4.2.1 in ARCH-COMP19
# AMYTISS solves the problem in 0.16 seconds on i9 processor (MacBook Pro)
# Max Prob = 0.99


#-----------------------------------------------------------------------
# Project Data
#-----------------------------------------------------------------------
# (Project name) is essential. It will be used for names of output files.
project_name = "bas";

#-----------------------------------------------------------------------
# Output Memory Model
#-----------------------------------------------------------------------
# The (data) tells the tool which memory model should be used when saving results
# use the values : raw | bits | bitmap | bdd
data = "raw";
save_transitions = "true";
save_controller = "true";

#-----------------------------------------------------------------------
# State/Input/Disturbance Sets
#-----------------------------------------------------------------------
# The user is asked to provide the range of the state, input and disturbance intervals.
# The lower and upper bounds of the sets are respectively indicated by "lb" and "ub". The disceretization parameters are also designated by "eta".
states{
	dim = "4";
	eta = " 0.5,  0.5,  1.0,  1.0";
	lb  = "19.0, 19.0, 30.0, 30.0";
	ub  = "21.0, 21.0, 36.0, 36.0";
	err = " 0.0,  0.0,  0.0,  0.0";
}
inputs{
	dim = "1";
	eta = "1.0";
	lb  = "17.00";
	ub  = "20.00";
	err = "0.00";
}

#-----------------------------------------------------------------------
# System-Post Dynamics
#-----------------------------------------------------------------------
# The user is required to provide the desired dynamics.
# The additive noise inside the dynamics is not needed to be implemented. Instead, the covariance matrix of the noises will be later asked to be implemented.
# Your post variables should start with (xx) followed by the index of the dimension (starting from 0 not 1).
# Maximum number of dimensions is (states.dim)
# you are allowed to use:
#  - array indexing to access states in x (e.g., x0 as the first state variable)
#  - array indexing to access inputs in u (e.g., u0 as the first input variable)
#  - array indexing to access disturbances in u (e.g., w0 as the first distrubance variable)
#  - any math function from: https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/mathFunctions.html

post_dynamics{
	constant_values = "concrete_t A[16] = {0.6682, 0.0, 0.02632, 0.0, 0.0, 0.6830, 0.0, 0.02096, 1.0005, 0.0,  -0.000499, 0.0, 0.0, 0.8004, 0.0, 0.1996}; concrete_t B[4] = {0.1320, 0.1402, 0.0, 0.0}; concrete_t Q[4] = {3.4378, 2.9272, 13.0207, 10.4166};";

    xx0 = "x0*A[0]  + x1*A[1]  + x2*A[2]  + x3*A[3]  + u0*B[0] + Q[0]";
	xx1 = "x0*A[4]  + x1*A[5]  + x2*A[6]  + x3*A[7]  + u0*B[1] + Q[1]";
	xx2 = "x0*A[8]  + x1*A[9]  + x2*A[10] + x3*A[11] + u0*B[2] + Q[2]";
	xx3 = "x0*A[12] + x1*A[13] + x2*A[14] + x3*A[15] + u0*B[3] + Q[3]";
}

#-----------------------------------------------------------------------
# Information of the Noises
#-----------------------------------------------------------------------
# The user is also asked to provide the inverse and the determinant of the covariance matrix of the noises. 
# The original covariance matrix should be positive semi-definite.
# The cutting probability should be a value below th max value of the PDF and used to cut the probability below
# it and cosider any values below it as zero.
noise{
	pdf_truncation = "fixed_truncation";
	inv_covariance_matrix = "12.9199, 12.9199, 2.5826, 3.2279";
	det_covariance_matrix = " 7.1862e-04";
	cutting_region = "{{-0.5, 0.5},{-0.5, 0.5},{-2.0, 2.0},{-2.0, 2.0}}";
}

#-----------------------------------------------------------------------
# Specifications
#-----------------------------------------------------------------------
# This code is able to synthesize controllers for the "safety and reachability" pecifications.
# type = safe | reach
# If the property of interest is "safety", the user is asked to provide the range of the safe set.
specs {
	type = "safe";
	time_steps = "6";
}
