#-----------------------------------------------------------------------
# File:        IPS.cfg
#-----------------------------------------------------------------------

# Authors: A. Lavaei*, M. Khaled*, S. Soudjani, M. Zamani
# Date created: 15.01.2020

#-----------------------------------------------------------------------
# Project Data
#-----------------------------------------------------------------------
# (Project name) is essential. It will be used for names of output files.
# (synthesis_pack) is optional and defines how many synthesis tasks are paked together, and its values can be:
#	1- off: meaning one synthesis task at a time
#	2- x%%: where x is positive value between 0 and 99 as percentage of the domain diameter [0% = size 1].
#	3- x  : where x is non zero positive value representing exact number of packed synthesis tasks.
project_name = "ips";

#-----------------------------------------------------------------------
# Output Memory Model
#-----------------------------------------------------------------------
# The (data) tells the tool which memory model should be used when saving results
# use the values : raw | bits | bitmap | bdd
data = "raw";
save_transitions = "false";
save_controller = "true";


#-----------------------------------------------------------------------
# Code Generation
#-----------------------------------------------------------------------
# The (implement)  tells the tool which implememtation is used for code generation
# use the values : no | cpp | c | vhdl | verilog
implement = "no";


#-----------------------------------------------------------------------
# State/Input/Disturbance Sets
#-----------------------------------------------------------------------
# The user is asked to provide the range of the state, input and disturbance intervals.
# The lower and upper bounds of the sets are respectively indicated by "lb" and "ub". The disceretization parameters are also designated by "eta".

states{
	dim = "2";
	eta = " 0.00100,  0.05000";
	lb  = "-0.18000, -0.75000";
	ub  = " 0.18000,  0.750000";
}
inputs{
	dim = "1";
	eta = " 0.20";
	lb  = "-2.00";
	ub  = " 2.00";
}
#-----------------------------------------------------------------------
# System-Post Dynamics
#-----------------------------------------------------------------------
# The user is also required to provide the desired dynamics.
# The additive noise inside the dynamics is not needed to be implemented. Instead, the covariance matrix of the noises will be later asked to be implemented.
# Your post variables should start with (xx) followed by the index of the dimension (starting from 1 not 0).
# Maximum number of dimensions is (states.dim)
# you are allowed to use:
#  - array indexing to access states in x (e.g., x0 as the first state)
#  - array indexing to access inputs in u (e.g., u0 as the first input)
#  - any math function from: https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/mathFunctions.html

post_dynamics{
	constant_values = "concrete_t g = 9.81f, m = 0.1314f, l = 0.68f, B = 0.06f, tau = 0.02f;";

	code_before = "concrete_t t = ((3.0f*g)/(2.0f*l)), n = (3.0f/(2.0f*l)), k = ((3.0f*B)/(m*l*l));";
	xx0 = "x0 + tau*x1";
	xx1 = "x1*(1.0f - tau*k) - tau*n*cos(x0)*u0 + tau*t*sin(x0)";
}

#-----------------------------------------------------------------------
# Covariance Matrix of the Noises
#-----------------------------------------------------------------------
# The user is also asked to provide the covariance matrix of the noises. This matrix should be positive semi-definite.
# you are allowed to use:
#  - array indexing to access covariance in cov (e.g., cov1 as the first-row elements of the covariance matrix corresponding to the first state)

noise{
	inv_covariance_matrix = "2000, 2000";
	det_covariance_matrix = "2.5000e-07";
	cutting_probability = "100";
}
#-----------------------------------------------------------------------
# Specifications
#-----------------------------------------------------------------------
# This code is able to synthesize controllers for the "safety and reachability" pecifications.
# If the property of interest is "safety", the user is asked to provide the range of the safe set.


# Range of Safe Set

specs {
	type = "safe";
	time_steps = "25";
}
